// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `scyna.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:scyna.Request)
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:scyna.Request.TraceID)
    pub TraceID: u64,
    // @@protoc_insertion_point(field:scyna.Request.Body)
    pub Body: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:scyna.Request.Data)
    pub Data: ::std::string::String,
    // @@protoc_insertion_point(field:scyna.Request.JSON)
    pub JSON: bool,
    // special fields
    // @@protoc_insertion_point(special_field:scyna.Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TraceID",
            |m: &Request| { &m.TraceID },
            |m: &mut Request| { &mut m.TraceID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Body",
            |m: &Request| { &m.Body },
            |m: &mut Request| { &mut m.Body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Data",
            |m: &Request| { &m.Data },
            |m: &mut Request| { &mut m.Data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "JSON",
            |m: &Request| { &m.JSON },
            |m: &mut Request| { &mut m.JSON },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.TraceID = is.read_uint64()?;
                },
                18 => {
                    self.Body = is.read_bytes()?;
                },
                34 => {
                    self.Data = is.read_string()?;
                },
                24 => {
                    self.JSON = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.TraceID != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.TraceID);
        }
        if !self.Body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Body);
        }
        if !self.Data.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Data);
        }
        if self.JSON != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.TraceID != 0 {
            os.write_uint64(1, self.TraceID)?;
        }
        if !self.Body.is_empty() {
            os.write_bytes(2, &self.Body)?;
        }
        if !self.Data.is_empty() {
            os.write_string(4, &self.Data)?;
        }
        if self.JSON != false {
            os.write_bool(3, self.JSON)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.TraceID = 0;
        self.Body.clear();
        self.Data.clear();
        self.JSON = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            TraceID: 0,
            Body: ::std::vec::Vec::new(),
            Data: ::std::string::String::new(),
            JSON: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:scyna.Response)
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:scyna.Response.Code)
    pub Code: i32,
    // @@protoc_insertion_point(field:scyna.Response.Body)
    pub Body: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:scyna.Response.SessionID)
    pub SessionID: u64,
    // @@protoc_insertion_point(field:scyna.Response.Token)
    pub Token: ::std::string::String,
    // @@protoc_insertion_point(field:scyna.Response.Expired)
    pub Expired: u64,
    // special fields
    // @@protoc_insertion_point(special_field:scyna.Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Code",
            |m: &Response| { &m.Code },
            |m: &mut Response| { &mut m.Code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Body",
            |m: &Response| { &m.Body },
            |m: &mut Response| { &mut m.Body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "SessionID",
            |m: &Response| { &m.SessionID },
            |m: &mut Response| { &mut m.SessionID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Token",
            |m: &Response| { &m.Token },
            |m: &mut Response| { &mut m.Token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Expired",
            |m: &Response| { &m.Expired },
            |m: &mut Response| { &mut m.Expired },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.Code = is.read_int32()?;
                },
                18 => {
                    self.Body = is.read_bytes()?;
                },
                24 => {
                    self.SessionID = is.read_uint64()?;
                },
                34 => {
                    self.Token = is.read_string()?;
                },
                40 => {
                    self.Expired = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Code != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.Code);
        }
        if !self.Body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.Body);
        }
        if self.SessionID != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.SessionID);
        }
        if !self.Token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.Token);
        }
        if self.Expired != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.Expired);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Code != 0 {
            os.write_int32(1, self.Code)?;
        }
        if !self.Body.is_empty() {
            os.write_bytes(2, &self.Body)?;
        }
        if self.SessionID != 0 {
            os.write_uint64(3, self.SessionID)?;
        }
        if !self.Token.is_empty() {
            os.write_string(4, &self.Token)?;
        }
        if self.Expired != 0 {
            os.write_uint64(5, self.Expired)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.Code = 0;
        self.Body.clear();
        self.SessionID = 0;
        self.Token.clear();
        self.Expired = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            Code: 0,
            Body: ::std::vec::Vec::new(),
            SessionID: 0,
            Token: ::std::string::String::new(),
            Expired: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:scyna.Event)
pub struct Event {
    // message fields
    // @@protoc_insertion_point(field:scyna.Event.Entity)
    pub Entity: u64,
    // @@protoc_insertion_point(field:scyna.Event.Version)
    pub Version: u64,
    // @@protoc_insertion_point(field:scyna.Event.Body)
    pub Body: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:scyna.Event.TraceID)
    pub TraceID: u64,
    // special fields
    // @@protoc_insertion_point(special_field:scyna.Event.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Entity",
            |m: &Event| { &m.Entity },
            |m: &mut Event| { &mut m.Entity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Version",
            |m: &Event| { &m.Version },
            |m: &mut Event| { &mut m.Version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Body",
            |m: &Event| { &m.Body },
            |m: &mut Event| { &mut m.Body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "TraceID",
            |m: &Event| { &m.TraceID },
            |m: &mut Event| { &mut m.TraceID },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Event>(
            "Event",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Event {
    const NAME: &'static str = "Event";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.Entity = is.read_uint64()?;
                },
                16 => {
                    self.Version = is.read_uint64()?;
                },
                26 => {
                    self.Body = is.read_bytes()?;
                },
                40 => {
                    self.TraceID = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Entity != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.Entity);
        }
        if self.Version != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.Version);
        }
        if !self.Body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.Body);
        }
        if self.TraceID != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.TraceID);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Entity != 0 {
            os.write_uint64(1, self.Entity)?;
        }
        if self.Version != 0 {
            os.write_uint64(2, self.Version)?;
        }
        if !self.Body.is_empty() {
            os.write_bytes(3, &self.Body)?;
        }
        if self.TraceID != 0 {
            os.write_uint64(5, self.TraceID)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Event {
        Event::new()
    }

    fn clear(&mut self) {
        self.Entity = 0;
        self.Version = 0;
        self.Body.clear();
        self.TraceID = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Event {
        static instance: Event = Event {
            Entity: 0,
            Version: 0,
            Body: ::std::vec::Vec::new(),
            TraceID: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Event {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Event").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:scyna.EmptyRequest)
pub struct EmptyRequest {
    // special fields
    // @@protoc_insertion_point(special_field:scyna.EmptyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmptyRequest {
    fn default() -> &'a EmptyRequest {
        <EmptyRequest as ::protobuf::Message>::default_instance()
    }
}

impl EmptyRequest {
    pub fn new() -> EmptyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmptyRequest>(
            "EmptyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EmptyRequest {
    const NAME: &'static str = "EmptyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EmptyRequest {
        EmptyRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmptyRequest {
        static instance: EmptyRequest = EmptyRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmptyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmptyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmptyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bscyna.proto\x12\x05scyna\"_\n\x07Request\x12\x18\n\x07TraceID\x18\
    \x01\x20\x01(\x04R\x07TraceID\x12\x12\n\x04Body\x18\x02\x20\x01(\x0cR\
    \x04Body\x12\x12\n\x04Data\x18\x04\x20\x01(\tR\x04Data\x12\x12\n\x04JSON\
    \x18\x03\x20\x01(\x08R\x04JSON\"\x80\x01\n\x08Response\x12\x12\n\x04Code\
    \x18\x01\x20\x01(\x05R\x04Code\x12\x12\n\x04Body\x18\x02\x20\x01(\x0cR\
    \x04Body\x12\x1c\n\tSessionID\x18\x03\x20\x01(\x04R\tSessionID\x12\x14\n\
    \x05Token\x18\x04\x20\x01(\tR\x05Token\x12\x18\n\x07Expired\x18\x05\x20\
    \x01(\x04R\x07Expired\"g\n\x05Event\x12\x16\n\x06Entity\x18\x01\x20\x01(\
    \x04R\x06Entity\x12\x18\n\x07Version\x18\x02\x20\x01(\x04R\x07Version\
    \x12\x12\n\x04Body\x18\x03\x20\x01(\x0cR\x04Body\x12\x18\n\x07TraceID\
    \x18\x05\x20\x01(\x04R\x07TraceID\"\x0e\n\x0cEmptyRequestB2\n\x0eio.scyn\
    a.protoP\x01H\x02Z\x0e./;scyna_proto\xaa\x02\x0bscyna.protoJ\xf3\x08\n\
    \x06\x12\x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\x08\r\n\x08\n\x01\x08\x12\x03\x03\0(\n\t\n\x02\x08\x01\x12\
    \x03\x03\0(\n\x08\n\x01\x08\x12\x03\x04\0#\n\t\n\x02\x08\n\x12\x03\x04\0\
    #\n\x08\n\x01\x08\x12\x03\x05\0)\n\t\n\x02\x08%\x12\x03\x05\0)\n\x08\n\
    \x01\x08\x12\x03\x06\0!\n\t\n\x02\x08\t\x12\x03\x06\0!\n\x08\n\x01\x08\
    \x12\x03\x07\0&\n\t\n\x02\x08\x0b\x12\x03\x07\0&\n\n\n\x02\x04\0\x12\x04\
    \t\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x0f\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\n\x02\x15\n\r\n\x05\x04\0\x02\0\x04\x12\x04\n\x02\t\x11\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\n\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\n\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x13\x14\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x0b\x02\x12\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\
    \x0b\x02\n\x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x0b\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x0b\x10\x11\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x02\x12\n\r\n\x05\
    \x04\0\x02\x02\x04\x12\x04\x0c\x02\x0b\x12\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\t\r\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03\x0c\x10\x11\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\r\x02\x12\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\r\x02\x0c\x12\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03\r\x02\x06\n\x0c\n\x05\x04\0\x02\x03\
    \x01\x12\x03\r\t\r\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r\x10\x11\n\n\n\
    \x02\x04\x01\x12\x04\x10\0\x16\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08\
    \x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x11\x02\x12\n\r\n\x05\x04\x01\x02\
    \0\x04\x12\x04\x11\x02\x10\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\
    \x02\x07\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x11\t\r\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\x11\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\
    \x12\x02\x12\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x12\x02\x11\x12\n\x0c\
    \n\x05\x04\x01\x02\x01\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\x12\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x12\x10\
    \x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x13\x02\x17\n\r\n\x05\x04\x01\
    \x02\x02\x04\x12\x04\x13\x02\x12\x12\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\
    \x03\x13\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x13\t\x12\n\x0c\
    \n\x05\x04\x01\x02\x02\x03\x12\x03\x13\x15\x16\n\x0b\n\x04\x04\x01\x02\
    \x03\x12\x03\x14\x02\x13\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x14\x02\
    \x13\x17\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03\x14\t\x0e\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03\x14\x11\x12\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x15\x02\x15\n\r\
    \n\x05\x04\x01\x02\x04\x04\x12\x04\x15\x02\x14\x13\n\x0c\n\x05\x04\x01\
    \x02\x04\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\
    \x15\t\x10\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x15\x13\x14\n\n\n\x02\
    \x04\x02\x12\x04\x18\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x18\x08\r\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x19\x02\x14\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04\x19\x02\x18\x0f\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x19\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x19\t\x0f\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03\x19\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1a\
    \x02\x15\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x1a\x02\x19\x14\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x1a\t\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1a\x13\
    \x14\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1b\x02\x12\n\r\n\x05\x04\x02\
    \x02\x02\x04\x12\x04\x1b\x02\x1a\x15\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03\x1b\x02\x07\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1b\t\r\n\x0c\n\
    \x05\x04\x02\x02\x02\x03\x12\x03\x1b\x10\x11\n\x0b\n\x04\x04\x02\x02\x03\
    \x12\x03\x1c\x02\x15\n\r\n\x05\x04\x02\x02\x03\x04\x12\x04\x1c\x02\x1b\
    \x12\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x03\x01\x12\x03\x1c\t\x10\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\
    \x03\x1c\x13\x14\n\n\n\x02\x04\x03\x12\x04\x1f\0\x20\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03\x1f\x08\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Request::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            messages.push(Event::generated_message_descriptor_data());
            messages.push(EmptyRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
